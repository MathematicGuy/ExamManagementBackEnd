// <auto-generated />
using System;
using ExamManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamManagement.Migrations
{
    [DbContext(typeof(SgsDbContext))]
    [Migration("20240517032745_ModifyStdTable")]
    partial class ModifyStdTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExamManagement.Models.Domains.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignmentTotalPoints")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.AssignmentQuestion", b =>
                {
                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AssignmentQuestions");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Evaluation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionResponseId")
                        .HasColumnType("int");

                    b.Property<float?>("Score")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<float?>("ScoreAI")
                        .IsRequired()
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("QuestionResponseId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerFileURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.StudentAssignment", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "AssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("StudentAssignments");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.TeacherAssignment", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "AssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("TeacherAssignments");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.AssignmentQuestion", b =>
                {
                    b.HasOne("ExamManagement.Models.Domains.Assignment", "Assignment")
                        .WithMany("AssignmentQuestions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamManagement.Models.Domains.Question", "Question")
                        .WithMany("AssignmentQuestion")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.FeedBack", b =>
                {
                    b.HasOne("ExamManagement.Models.Domains.Question", "QuestionResponse")
                        .WithMany("QuestionFeedback")
                        .HasForeignKey("QuestionResponseId");

                    b.Navigation("QuestionResponse");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.StudentAssignment", b =>
                {
                    b.HasOne("ExamManagement.Models.Domains.Assignment", "Assignments")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamManagement.Models.Domains.Student", "Student")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignments");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.TeacherAssignment", b =>
                {
                    b.HasOne("ExamManagement.Models.Domains.Assignment", "Assignment")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamManagement.Models.Domains.Teacher", "Teacher")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.Assignment", b =>
                {
                    b.Navigation("AssignmentQuestions");

                    b.Navigation("StudentAssignments");

                    b.Navigation("TeacherAssignments");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.Question", b =>
                {
                    b.Navigation("AssignmentQuestion");

                    b.Navigation("QuestionFeedback");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.Student", b =>
                {
                    b.Navigation("StudentAssignments");
                });

            modelBuilder.Entity("ExamManagement.Models.Domains.Teacher", b =>
                {
                    b.Navigation("TeacherAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
